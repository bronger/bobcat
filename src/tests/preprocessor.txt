>>> from gummi.preprocessor import load_file, Excerpt
>>> from gummi.common import modulepath
>>> import os.path
>>> open("test2.rsl", "w").write('.. -*- coding: utf-8 -*-\n.. Bobcat 1.0\n.. \\\n\n\\beta\\\nkf\\0x64;sjh[[K2005]]\\\\56;fd\\ \\ \\ kj\n \\ \\alpha--\\ \\alpha\n\\thetavar\n\\theta\n')
>>> text, encoding, bobcat_version = load_file("test2.rsl")
>>> text, encoding, bobcat_version
(u'\n\n\n\n\u03b2\nkfdsjh[K2005]\\56;fdkj\n \u03b1--\u03b1\n\u03b8var\n\u03b8\n', None, '1.0')
>>> text.original_text
u'.. -*- coding: utf-8 -*-\n.. Bobcat 1.0\n.. \\\n\n\\beta\\\nkf\\0x64;sjh[[K2005]]\\\\56;fd\\ \\ \\ kj\n \\ \\alpha--\\ \\alpha\n\\thetavar\n\\theta\n'
>>> text.original_positions
{0: PositionMarker("test2.rsl", 1, 24, 24), 1: PositionMarker("test2.rsl", 2, 13, 38), 2: PositionMarker("test2.rsl", 3, 4, 43), 3: PositionMarker("test2.rsl", 4, 0, 44), 4: PositionMarker("test2.rsl", 5, 0, 45), 5: PositionMarker("test2.rsl", 5, 6, 51), 6: PositionMarker("test2.rsl", 6, 0, 52), 9: PositionMarker("test2.rsl", 6, 8, 60), 13: PositionMarker("test2.rsl", 6, 13, 65), 19: PositionMarker("test2.rsl", 6, 20, 72), 20: PositionMarker("test2.rsl", 6, 22, 74), 25: PositionMarker("test2.rsl", 6, 33, 85), 28: PositionMarker("test2.rsl", 7, 0, 88), 29: PositionMarker("test2.rsl", 7, 3, 91), 30: PositionMarker("test2.rsl", 7, 9, 97), 32: PositionMarker("test2.rsl", 7, 13, 101), 33: PositionMarker("test2.rsl", 7, 19, 107), 34: PositionMarker("test2.rsl", 8, 0, 108), 35: PositionMarker("test2.rsl", 8, 6, 114), 39: PositionMarker("test2.rsl", 9, 0, 118), 40: PositionMarker("test2.rsl", 9, 6, 124), 41: PositionMarker("test2.rsl", 10, 0, 125)}
>>> text.escaped_positions
set([32, 6, 12, 18, 25, 29])
>>> text[-100:-10]
u'\n\n\n\n\u03b2\nkfdsjh[K2005]\\56;fdkj\n \u03b1-'
>>> text[20:10]
u''
>>> text = text.apply_postprocessing()
>>> text.original_text
u'.. -*- coding: utf-8 -*-\n.. Bobcat 1.0\n.. \\\n\n\\beta\\\nkf\\0x64;sjh[[K2005]]\\\\56;fd\\ \\ \\ kj\n \\ \\alpha--\\ \\alpha\n\\thetavar\n\\theta\n'
>>> text.original_positions
{0: PositionMarker("test2.rsl", 1, 24, 24), 1: PositionMarker("test2.rsl", 2, 13, 38), 2: PositionMarker("test2.rsl", 3, 4, 43), 3: PositionMarker("test2.rsl", 4, 0, 44), 4: PositionMarker("test2.rsl", 5, 0, 45), 5: PositionMarker("test2.rsl", 5, 6, 51), 6: PositionMarker("test2.rsl", 6, 0, 52), 32: PositionMarker("test2.rsl", 7, 19, 107), 9: PositionMarker("test2.rsl", 6, 8, 60), 39: PositionMarker("test2.rsl", 9, 6, 124), 13: PositionMarker("test2.rsl", 6, 13, 65), 34: PositionMarker("test2.rsl", 8, 6, 114), 19: PositionMarker("test2.rsl", 6, 20, 72), 20: PositionMarker("test2.rsl", 6, 22, 74), 25: PositionMarker("test2.rsl", 6, 33, 85), 33: PositionMarker("test2.rsl", 8, 0, 108), 38: PositionMarker("test2.rsl", 9, 0, 118), 28: PositionMarker("test2.rsl", 7, 0, 88), 29: PositionMarker("test2.rsl", 7, 3, 91), 30: PositionMarker("test2.rsl", 7, 9, 97), 31: PositionMarker("test2.rsl", 7, 13, 101)}
>>> text.escaped_positions
set([6, 12, 18, 25, 29, 31])
>>> text = text[4:21]
>>> text
u'\u03b2\nkfdsjh[K2005]\\5'
>>> text.original_text
u'\\beta\\\nkf\\0x64;sjh[[K2005]]\\\\5'
>>> text.original_positions
{0: PositionMarker("test2.rsl", 5, 0, 0), 1: PositionMarker("test2.rsl", 5, 6, 6), 2: PositionMarker("test2.rsl", 6, 0, 7), 5: PositionMarker("test2.rsl", 6, 8, 15), 9: PositionMarker("test2.rsl", 6, 13, 20), 15: PositionMarker("test2.rsl", 6, 20, 27), 16: PositionMarker("test2.rsl", 6, 22, 29)}
>>> text.escaped_positions
set([8, 2, 14])
>>> text = text[:10] + text[10:]
>>> text
u'\u03b2\nkfdsjh[K2005]\\5'
>>> text.original_text
u'\\beta\\\nkf\\0x64;sjh[[K2005]]\\\\5'
>>> text.original_positions
{0: PositionMarker("test2.rsl", 5, 0, 0), 1: PositionMarker("test2.rsl", 5, 6, 6), 2: PositionMarker("test2.rsl", 6, 0, 7), 5: PositionMarker("test2.rsl", 6, 8, 15), 9: PositionMarker("test2.rsl", 6, 13, 20), 15: PositionMarker("test2.rsl", 6, 20, 27), 16: PositionMarker("test2.rsl", 6, 22, 29)}
>>> text.escaped_positions
set([8, 2, 14])
>>> text = text[6]
>>> text
u'j'
>>> text.original_text
u'j'
>>> text.original_positions
{0: PositionMarker("test2.rsl", 6, 9, 0)}
>>> text.escaped_positions
set([])
>>> text = text[10:]
>>> text
u''
>>> text.original_text
u''
>>> text.original_positions
{0: PositionMarker("test2.rsl", 6, 10, 0)}
>>> text.escaped_positions
set([])
>>> text[3]
Traceback (most recent call last):
  ...
IndexError: string index out of range
>>> #
>>> #  Now, test the split() method
>>> #
>>> open("test2.rsl", "w").write(".. -*- coding: utf-8 -*-\n.. Bobcat 1.0\na, b, c,")
>>> text, encoding, bobcat_version = load_file("test2.rsl")
>>> text = text[2:]
>>> parts = text.split(",")
>>> parts
[u'a', u' b', u' c', u'']
>>> parts[0].original_position()
PositionMarker("test2.rsl", 3, 0, 0)
>>> parts = text.split()
>>> parts
[u'a,', u'b,', u'c,']
>>> parts[1].original_position()
PositionMarker("test2.rsl", 3, 3, 0)
>>> os.remove("test2.rsl")
>>> #
>>> #  Now, test Excerpt.code_snippets_intervals
>>> #
>>> open("test2.rsl", "w").write(u'.. -*- coding: utf-8 -*-\n.. Bobcat 1.0\n..\n\nThis is a code snippet: ```GOTO 10```.  And this is one in a paragraph of its\nown:\n\n```\nGOTO 10\n```\n\nAnd here the file ends.\n')
>>> text, encoding, bobcat_version = load_file("test2.rsl")
>>> text, text.code_snippets_intervals
(u'\n\n\n\nThis is a code snippet: ```GOTO 10```.  And this is one in a paragraph of its\nown:\n\n```\nGOTO 10\n```\n\nAnd here the file ends.\n', [(31, 38), (91, 100)])
>>> part1 = text[:34]; part2 = text[34:]
>>> part1.code_snippets_intervals, part2.code_snippets_intervals
([(31, 34)], [(0, 4), (57, 66)])
>>> (part1+part2).code_snippets_intervals
[(31, 34), (34, 38), (91, 100)]
>>> text.escaped_text()
u'\n\n\n\nThis is a code snippet: ```\x00\x00\x00\x00\x00\x00\x00```.  And this is one in a paragraph of its\nown:\n\n```\x00\x00\x00\x00\x00\x00\x00\x00\x00```\n\nAnd here the file ends.\n'
>>> len(text.escaped_text()) == len(text)
True
>>> os.remove("test2.rsl")
>>> open("test2.rsl", "w").write(u'.. -*- coding: utf-8 -*-\n.. Bobcat 1.0\n..\n\nThis is a code snippet with open ending: ```GOTO 10\n')
>>> text, encoding, bobcat_version = load_file("test2.rsl")
>>> len(text) == text.code_snippets_intervals[0][1]
True
>>> #
>>> #  Testing Excerpt.normalize_whitespace()
>>> #
>>> Excerpt(" a\tb\t c  d \n ef \tg \n ", "PRE", "myfile.rsl", {}, {}).normalize_whitespace()
u'a b c d ef g'
>>> empty_excerpt = Excerpt(" \t\t    \n  \t \n ", "PRE", "myfile.rsl", {}, {}).normalize_whitespace()
>>> empty_excerpt
u''
>>> empty_excerpt.original_position(0)
PositionMarker("myfile.rsl", 1, 0, 0)
>>> os.remove("test2.rsl")
