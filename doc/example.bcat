.. -*- coding: utf-8; mode: text; mode: auto-fill -*-
.. Bobcat 1.0


.. Every line starting with ".. " is ignored

.. Short remark to the following: After having read it, you may think “Torsten,
.. are you joking?  This is supposed to be _simple_?  This is as cryptic and
.. complex as LaTeX!”.  However, this is not true.  Note that these 600 lines
.. cover everything.  Additionally, really complex things such as MediaWiki
.. tables and index entries will be used by only a few authors.  The LaTeX
.. preamble isn't there at all, even for large documents.  And finally, all
.. characters can be entered as Unicode characters no matter in which “mode”.
.. Thus, typical Bobcat source documents should have a quite lucid look.


0. Structuring and cross referencing
====================================

Headings are underlined with equation signs (four at least).  Before the
heading must be an empty line.  The number of digits or hashes – separated by
dots – determines the nesting depth.  Headings of parts also have an equation
sign line _above_ the heading.

Cross references are put in backquotes.  I refer to the next chapter like this:
See chapter `Inline markup`, or see chapter `Inline-…` if this is unambiguous,
or see → chapter `Inline-Markup` so that the word “chapter” becomes part of the
hyperlink, too.  Internally, only the first 80 characters of whatever are
stored as a label.  This may lead to ambiguities but only in quite pathological
cases.

The heading number can be chosen freely.  The Bobcat compiler or editor can
adjust them to the print output if the author desires this.  This “writeback”
includes input method substitutions (see below) and the very first line in
which the encoding must be declared.  If this very first line is missing, this
issues a warning.


1. Inline markup
================

This is the first paragraph [Miller 2006].

This is _the second_ paragraph*.  This is its second sentence.**  It can be
seen on `IBM's homepage`→.*3  Of course, http://www.rwth-aachen.de/ or
mailto:bronger@physik.rwth-aachen.de will be marked-up as links.  Optionally,
they may have angle brackets or ASCII double quotes.  In case of angle
brackets, the protocol prefix may be omitted.

* A footnote
** Second footnote
`IBM's homepage`: http://www.ibm.com
*3 third footnote.  You may also use (without asterisk): ¹, ², ³, or ¹²
  (twelve).

The same footnote mark may occur multiple times.  They will be processed in
order of appearance.  This means that you could mark all your footnotes with \*
(not very wise, tough).  Footnote and reference to footnote must be in the same
section.  The reference must come first.

With hyperlinks, you have two possibilities: `IBM's homepage` and the separated
definition as above, or → Homepage of IBM <www.ibm.com>.  Instead of angle
brackets you can also use ASCII double quotes or round parentheses, but then
the protocol prefix is mandatory.

.. A line of at least four »-« produces a \\bigskip:

-------------------------------------------------------------------------------

.. → may be written as --> (via the input method).
..
.. → is used also for distinguishing between links to sections with same
.. headings: `Results → Silicon samples`.  Thus, in case two sections are
.. called “Silicon samples” but only one has a parent section called “Results”,
.. this is the way to go.  This also works for explicitly given labels.

In this ↑paragraph you see how index entries are realised.

.. ↑`long index entry` and ↑`index entry → long` or ↑`_index entry → long_` in
.. order to get the page number printed emphasised.  Instead of \↑ you may also
.. type --^ (via input method).  Note that all these index entries are also
.. printed in the text.  Page number markup is not printed, though.  If there
.. is an “→” in the index entry, subentries are printed comma-separated in
.. parentheses behind the main lemma: “index entry (long)”
.. 
.. Sort keys are written as follows: ↑`entry@sortkey` or ↑ `_long entry_ @sort
.. key`.  So it's the other way round as with Makeindex.

If you only wish to add lemmas to the index without printing them at the
current position, create a paragraph with only index entries and whitespace:

↑paragraph
↑`long index entry` ↑`index entry → long`
↑ `entry@sortkey`

.. Bibliography references must be defined only once in a document (or be
.. identical).  In contrast to this, footnotes and external links always refer
.. to the _following_, “unconsumed” definition.  Is there no following for
.. external links, the next preceding is used.  Footnotes are consumed after
.. refering to them.  Consequently, the same footnote can never be used twice
.. in a document.

.. Bibliography entries are marked-up like this:

[Miller 2006]
reference:: book
label:      Miller 2006
author:     Peter Miller
title:      LaTeX –
            publisher: an introduction
publisher:  WhatEver, Heidelberg
year:       2006

.. It is separated with empty lines at the top and the bottom.  If a paragraph
.. consists only of citation labels in backets, this is equivalent to LaTeX's
.. ```\nocite```.  The names “author”, “title” etc can be English or the
.. current document language.  “label” is optional, as is the label in
.. brackets.

.. As a second possibility, there is the short form which cannot be combined
.. with the long form.  It uses “//” instead of line breaks.  If Bobcat detects
.. only one unescaped “//”, it assumes the short form:

[Meier 2004]
reference:: article // title: Die Expansion subterraner Knollengewächse //
author: Peter Müller // journal: Journal of Agriculture // year: 2006 //
publisher: WhatEver, Heidelberg

.. Within the pre-defined environment ```references::```, you can use both
.. constructs, however, the ```reference::``` directive can be dropped if
.. desired.


2. Lists
========

Bullet lists work with dashes and spaces after them:

- First point

- Second point

- Third point

(Separated by empty lines at top and bottom.)  Within it, empty lines are
optional, though.  Should they be enumerated, use “#”:

1. First point

# Second point

# Third point

Or combine both:

- First point

-# Enumeration _within_ the bulleted list

- Second point

Definition lists work like this:

:Asterix: is the hero of our adventures …

:Cacofonix: is the bard.

By the way, following block elements that should be included in the preceding
one start with “+” (should be rare):

:Cacofonix: is the bard.

+ Although a rather bad one.


3. Escaping
===========

Bobcat uses the backslash for escaping.  Escaping occurs on two levels, the
input method and the parser.  On the input method level, it prevents “-->” from
becoming “\→”.  On the parser level, it prevents “\→” from being interpreted as
a syntactical element.  In the rare case that you want to use the input method
to write a non-syntactical right arrow, write \ -->.

\* This paragraph starts with an asterisk.  It is not a footnote.


4. Floats and insertion of images and text
==========================================

///////////////////////////////////////////////////////////////////////////////

This is the contents of the float.  There must be at least four “/” to start
it.  Before and after the float must be an empty line.

Figure #.#, `the label`:: This is the caption for this float.  It starts with
".* [0-9#.]+[a-z]?:: ".  The ".*" is interpreted as the type of the float and
the number is calculated accordingly.  Everything between the numbering and the
label is discarded.  Is there neither a numbering nor a label, the backend must
discard the "Figure x.x:" completely.  The contents of the caption can serve as
an implicit label as with section headings.  If there is a collision, this is
an error.  You must use then an explicit label.

This is the second paragraph of the caption.  Only in case of captions for
subfigures it is necessary to use a “+” for continuation.  If the caption is
empty _and_ there is neither a numbering nor a label, i. e. there is only the
“Figure::”, no caption is printed at all.  This can be used to separate
subfigures from each other, and from the shared caption.

The caption is distinguished from environments (see below) in that it has no
ending code.
///////////////////////////////////////////////////////////////////////////////

This is an example for the subfigure functionality:

///////////////////////////////////////////////////////////////////  columns: 3
First image

Figure `Label1`:: top left

Second image

Figure #.#b `Label2`:: top right

Third image

Figure `Label3`:: bottom left

Fourth image

Figure::

Figure `LabelForAll`:: This caption will be printed below the whole figure.  By
default, two subfigures will be set next to each other.  You can override it
with ```columns: 3``` or ```columns: 2:3:2``` (for the respective rows; the
last number is used for all subsequent lines, too), as in this example.  The
widths of the images are – as usual in Bobcat – maximal.
///////////////////////////////////////////////////////////////////////////////

A graphics is included like this:

insertion:: image.png

This can also be used to insert a text file.  ```image``` is an alias for
```insertion```.  By the way, these are shortened URLs, i.e., actually one must
say ```file:image.png```, and you can insert web documents:

insertion:: http://www.whatever.org/my_chapter4.bcat

You may add parameters:

insertion:: image.png, scaling: 25%, full width

The parameter names are – as usual in Bobcat – either in English or the current
document language, and they are case-sensitive.  For separating the key and the
value, you can use a colon or an equal sign.


5. Tables
=========

There are three table models: Both of reStructuredText and one of MediaWiki.


5.1 Grid tables
===============

First the grid tables:

+--------------------------+---------------++---------------+---------------+
| Heading 1                | Heading 2     || Heading 3     | Heading 4     |
| (Headings optional)      |               ||               |               |
+==========================+===============++===============+===============+
| Row 1, Column 1          | Column 2      || Column 3      | Column 4      |
+--------------------------+---------------++---------------+---------------+
| Row 2                    | Cells can span multiple columns.               |
+--------------------------+---------------++-------------------------------+
| Row 3                    | Cells can     || - Cells may                   |
+--------------------------+ span multiple || - contain block               |
| Row 4                    | rows.         || - elements.                   |
+--------------------------+---------------++-------------------------------+


5.2 Simple tables
=================

Here come the simple tables:

======  ======  ========
    Inputs       Output
--------------  --------
  A       B      A or B
======  ======  ========
false   false   false
true    false   true
false   true    true
true    true    true
======  ======  ========

The lines with dashes are for the column span only!  They don't denote
structuring, and in particular, they don't generate printed lines.

Alignment is done like in AsciiDoc:

|=====  =====|  ===|====
    Inputs       Output
--------------  --------
  A       B      A or B
======  ======  ========
false   false   false
true    false   true
------  ------  -------|
false   true    true
true    true    true
======  ======  ========

The fist column is left-aligned (default), the second right-aligned and the
third centred.  In the 4th row, the last column is right-aligned.  If you use
“centred” with anything else but a pipe sign, this is the character which is
used for alignment:

=========  ===,===
Product    Price
=========  |======
Clock       100,00
TV set     2000,00
Radio        30,00
=========  =======

The »|« makes “Price” left-aligned.

All this alignment also works for grid tables.  Here, too, all markers must be
_below_ the respective row, or above the very fist row if they are supposed to
affect the whole column.  Vertical alignment only works in grid tables, and
only if the row is at least 3 lines high:

+--------------------------+---------------++-------------------------------+
| Row 3                    | Rows may      || - Cells may                   |
+--------------------------+ span multiple -- - contain                     |
| Row 4                    | rows.         || - block elements.             -
+--------------------------+---------------++-------------------------------+

Here, the second column is centred and the third is aligned at the bottom.

As in reStructuredText, there are special rules for the very fist column of
simple tables: First, it must not be completely empty.  And secondly, it must
not span multiple rows.  This allows for multiple-line cells in the other
columns:

==========  ==============
Product     Description 
==========  ==============
Clock       beautiful, old
            and golden   
TV set      broken
Radio       retro look
=========   =============

(Those who really need an empty first column man use non-breaking spaces or
grid tables.)

Finally, simple tables must have at least two columns, and every column must
be at least three characters wide.


5.3 MediaWiki tables
====================

The third possibility are MediaWiki-like tables.  They are particularly
interesting if one uses a proportional screen font:

{|
!Broadcaster
!Channel
!Frequency (MHz)
!Remarks
|-
| → 3SAT <http://www.3sat.de> || K10 || 210,25 ||
|-
| → ARD Das Erste <http://www.DasErste.de> || K05 || 175,25 || 2)
|-
| → arte <http://www.arte.de> || S20 || 294,25 || 2-Kanal: German & French
|-
| → Bayrischer Rundfunk <http://www.br-online.de> || S04 || 126,25 ||
|}

The details can be found at http://en.wikipedia.org/wiki/Help:Table, however, I
certainly want to implement only the basics.


6. Equations
============

Formulae are enclosed with curly braces.  So, the Pythagorean theorem for the
three lengths {a}, {b}, and {c} is

{a^2 + b^2 = c^2.}

Displayed equations simply are not part of a paragraph.  Fractions look like this:

{n+1 // n}

And, with strechable parentheses:

{(n+1 // n) `with label`}

Stretchable braces are directly inside of curly brackets (the label and
whitespace doesn't count).  Functions are identified according to an internal
table: {sin \alpha}.  You may also write {sin α}.  Roots work like {\root n}
(or {√n}), cubic roots like {√³n} or {√^3 n}.  Equations can be aligned as in
AMSMath:

{ a  &= 2 b }
{ 2c &= b   }

Text in equations is enclosed with "..." as in OpenOffice.org.


6.1. Physical quantities
========================

In this section, I write ~ instead of the non-breaking space so that you can
see where it is.  A thin space may also be used instead.

Three metres are written 3~m or {3~m}.  { A = 4 cm² = s². } is equivalent to
LaTeX's ```\[A = \unit[4]{cm^2} = s^2 \]```.  Metres alone can be written ~m,
and a mere number can be written 4,3e-10~ (the formatting of the exponent
depends on the backend).  You may use exponents and fractions in the unit:
{4 {m//s}}


7. Text blocks
==============

Text blocks work as in reStructuredText, |text block|.  There are no
parameters, and only inline material is allowed.

|text block|:: i.e. with pipe signs


8. Directives and roles
=======================

Directives and roles also work in equations.


8.1 Directives
==============

Directives are poor man's macros.  For example, this changes the current
document language:

language:: German

“key: value” pairs are possible, separated by commas.  With `language::
German`, directives on inline level are equally possible.  A block with block
directives must consist only of directives.  The name of the directive,
i.e. everything before the ::, is allowed to contain all letters in the
Unicode, however, it must start of the same line.


8.1.1  Commenting out code
==========================

Moreover, there are two directives that comment out code:

```
ignore::

...

::end ignore
```

Everything inbetween is completely ignored.  Even index entries and text blocks
have no effect.  This directive may be nested.  Too many ```::end ignore```
trigger a warning.


8.2 Environments
================

Environments are syntactically very similar to directives, however, the author
can use arbitrary type names.  They have a beginning and an end and must not be
nested, even not indirectly via insertions.  If you want to use a type that is
already in use for a directive, you must escape any character within the name.
Example:

```
Theorem:: Pythagorean theorem

In any right triangle, the area of the square whose side is the hypotenuse is
equal to the sum of the areas of the squares whose sides are the two legs.

::end Theorem
```

“Theorem” is the type of this environment.  Obviously, an environment may have
a heading which must be placed in the same block as the beginning of the
environment.  Environments may have numbers and labels, as with floats:

```
Theorem #.#, `Pythagoras`:: Pythagorean theorem
```

The label may be implicit by the heading of the environment, or the explicit
label.  There are no namespaces for labels.  In case that in a section, some
environments have the same heading and they are referred to, this is an error.
The same is true if a section contains an environment _and_ a subsection with
the same implicit label.  Then, you must use explicit labels.

If a backend doesn't know about a certain environment, it must use a standard
formatting for it, i.e. some sort of highlighted heading, printing of the
environment's type, and generation of the numbering.


8.3 Roles
=========

Very similar to environments are _roles_, however on inline level.  For
example, you may write `Einstein`:name: or `sp3`:orbital:.  The role is passed
to the backend which may make use of it or not.  If it doesn't know it, the
role must be ignored.

Roles must not be nested, even not indirectly via text blocks.

There are no standard roles (yet), so this is an extension mechanism.  As
usual, you may use either English role names or the current document language.
However, it is the task of the backend to recognise it.


9. Source code excerpts
=======================


Source code snippets are enclosed with \`\`\`...\`\`\`: ```print a$``` or

```
10 cls
20 print "Hello"
```

With

programming language:: BASIC

you may set the syntax highlighting language for the following excerpts.


10. Meta information
====================

Meta info (title, author, keywords, etc) are directives.  They may occur
everywhere in the document but it's sensible to collect them at the top.  If a
meta info occurs more than once, the _first_ definition is used and a warning
is emitted.

If you prepare a non-English document, it's best to start with ```language::```
so that you can use your language of choice for the rest of the document.

```
language:: German
Titel::    Die Expansion subterraner
           Knollengewächse
Autor::    Ich natürlich
Theme::    IAM Diplomarbeit
…
```

Languages can be given according to RFC 4646 or in the long explicit form.  In
the latter case, there must be an exact correspondence with the official names
for the language, case-sensitively.  The parts that are separated with dashes
in RFC 4646 are separated by commas in the long form.  Thus, the following is
equivalent:

```
language:: de-DE-1996
language:: deutsch, Deutschland, neue Rechtschreibung
language:: German, Germany, new spelling
```

The _abstract_ belongs to meta data but it is realised as a (pre-defined)
environment:

```
abstract::

This document is an example file for Bobcat.

::end abstract
```
