.. -*- coding: utf-8 -*-
.. Gummi 1.0


.. Alles, was mit ".. " in der ersten Spalte anfängt, wird nicht gedruckt

0. Gliederung und Querverweise
==============================

Überschriften werden mit Gleichheitszeichen unterstrichen (mindestens vier).
Vor der Überschrift muß eine Leerzeile sein.  Die Zahl der Ziffern oder Rauten
– durch Punkte getrennt – bestimmt die Gliederungstiefe.  Überschriften von
Teilen (Parts) werden durch eine zweite Gleichheitszeichen-Linie _über_ der
Überschrift gekennzeichnet.

Querverweise werden in Backquotes gesetzt.  Ich verweise auf das nächste
Kapitel also z.B. so:  Siehe Kapitel `Inline-Markup`, oder siehe Kapitel
`Inline-...`, wenn's eindeutig bleibt, oder siehe Kapitel `Inline-…` (dito),
oder siehe → Kapitel `Inline-Markup`, damit das Wort „Kapitel“ noch zum
Hyperlink dazugenommen wird.

Die Gliederungsnummern kann man sich übrigens beliebig ausdenken.  Der
Gummi-Compiler bzw. -Editor kann auf Benutzerwunsch hin aber ein Writeback
durchführen, d.h. den Quelltext dahingehend verändern, daß die Nummern mit
denen im PDF übereinstimmen.  (Etwas, das in LaTeX undenkbar wäre.)  Das
Writeback gilt auch für Ersetzungen durch die Input Method (siehe unten) und
für einen Vorschlag für die allererste Zeile, die das Encoding und die
Input-Method enthält, falls diese Zeile vom Autor noch nicht angegeben wurde;
das triggert nämlich eine Warnung.


1. Inline-Markup
================

Dies ist der erste Absatz [Kopka 2006].

Dies ist _der zweite_ Absatz*.  Siehe Kapitel `Kapitel`.**  Das kann man auf
der `Homepage von IBM`→ nachlesen.*3  Selbstredend wird
http://www.rwth-aachen.de/ oder mailto:bronger@physik.rwth-aachen.de
entsprechend behandelt, optional in spitzen Klammern (also
Größer-/Kleinerzeichen) oder ASCII-Anführungszeichen.  Bei den spitzen Klammern
darf auch das Protokoll-Präfix entfallen.

* Eine Fußnote
** Zweite Fußnote
`Homepage von IBM`: http://www.ibm.com
*3 außerdem für Fußnoten möglich (ohne Asterisk): ¹, ², ³, oder auch ¹²
     (zwölf).

Gleiche Fußnoten-Markierungen dürfen auch mehrfach vorkommen, das gilt auch für
die Nummern.  Sie werden dann der Reihe nach abgearbeitet.  Man darf also
z.B. alle seine Fußnoten mit \* markieren.

Bei Hyperlinks gibt es zwei Möglichkeiten: `Homepage von IBM` und dann die
Definition, also wie oben, oder → Homepage von IBM <www.ibm.com>.  Statt
spitzen Klammern kann man auch ASCII-Anführungszeichen oder runde Klammern
nehmen, dann aber mit Protokoll-Präfix.

.. Eine Linie von mindestens vier »-« erzeugt ein \bigskip:

-------------------------------------------------------------------------------

.. → kann auch durch --> ersetzt werden (via Input Method).
.. → kann bei Hyperlinks auch weggelassen werden, wenn alles eindeutig bleibt
.. → wird auch benutzt, um innerhalb von Verweisen auf Überschriften alles
.. eindeutig zu machen: `Ergebnisse → Siliziumproben`.  Falls also zwei
.. Abschnitte die Überschrift „Siliziumproben“ haben, aber nur eine den
.. Mutterabschnitt „Ergebnisse“.

Im dritten ↑Absatz sieht man, wie das mit Indexeinträgen läuft.

.. ↑`langer Indexeintrag` bzw. ↑`Indexeintrag → langer` oder ↑`_Indexeintrag →
.. langer_`, um die Ziffer im Index kursiv zu bekommen.  Statt \↑ kann man auch
.. --^ eingeben.
.. 
.. Sortierschlüssel werden wie folgt eingegeben: ↑`Eintrag@Sortierung` oder ↑
.. `_langer Eintrag_ @Sortierung`.  Ist also genau andersherum als bei
.. Makeindex.

Will man die Lemmas nur in das Stichwortverzeichnis stellen, aber nicht an der
aktuellen Position auch in den Text einfügen, legt man einfach einen Absatz an,
der nur aus Stichworteinträgen und Whitepace besteht:

↑Absatz
↑`langer Indexeintrag` ↑`Indexeintrag → langer`
↑ `Eintrag@Sortierung`

.. Literaturstellen dürfen nur einmal im Dokument definiert werden.  Fußnoten
.. und externe Links hingegen beziehen sich auf die _nächstfolgende_
.. „unverbrauchte“ Definition.  Gibt es für externe Links keine nächstfolgende,
.. wird die nächstvorangehende genommen.  Fußnoten werden bei Benutzung
.. „verbraucht“.  Eine Fußnote kann also nie zweimal im Fließtext benutzt
.. werden.


.. Ich dachte mir, daß Literaturstellen so angegeben werden:

[Kopka 2006]
Typ:       Buch
Label:     Kopka 2006
Verfasser: Helmut Kopka
Titel:     LaTeX –
           eine Einführung
Verlag:    WeißDerGeier, Heidelberg
Jahr:      2006

.. Nach oben und nach unten von einer Leerzeile getrennt.  Das ist nicht
.. sonderlich originell, aber pragmatisch.  Die Namen für "Verfasser", "Titel"
.. etc. können entweder Englisch oder die aktuelle Dokumentsprache sein.  Der
.. Eintrag "Label" ist optional.

.. Es kann auch vorgefertigte Kurzformen geben, mit dem Semikolon als
.. Trennzeichen (Kurz- und Langform sind kombinierbar):

[Müller]  Artikel:
Die Expansion subterraner Knollengewächse; Peter Müller; Journal of
Agriculture; 2006


2. Aufzählungen
===============

Aufzählungen mit Bullets gehen mit Bindestrichen und Leerzeichen dahinter:

- Erster Punkt

- Zweiter Punkt

- Dritter Punkt

Außerdem müssen sie wie alle Blockelemente nach oben und nach unten mit einer
Leerzeile getrennt sein.  Innerhalb sind die Leerzeilen aber optional.  Sollen
sie durchnumeriert werden, benutzt man die Nummer mit Punkt dahinter oder „#“:

1. Erster Punkt

# Zweiter Punkt

# Dritter Punkt

Beides läßt sich kombinieren:

- Erster Punkt

-# Aufzählung _innerhalb_ der Bullet-Liste

- Zweiter Punkt

Definitionslisten gehen so:

:Asterix: ist der Held unserer Abenteuer …

:Toubadix: er selbst findet sich genial, alle anderen finden ihn
unbeschreiblich.

Übrigens werden Folge-Blockelemente immer mit „+“ eingeletet (das ist an vielen
Stellen anwendbar, sollte aber eher selten vorkommen):

:Toubadix: er selbst findet sich genial, alle anderen finden ihn
unbeschreiblich.

+ Aber wenn er schweigt, ist er ein fröhlicher Geselle und bei allen beliebt.


3. Escapierung
==============

Escapierung von „aktiven“ Zeichen ist ein großes Problem von
Textdatei-Formaten.  In Gummi wird der Backslash als Escapierungssysmbol
verwendet.  Man sollte sich vor Augen führen, daß auf zwei Ebenen escapiert
werden muß: Auf Präprozessorebene, um Ersetzungen wegen der Input-Method zu
unterbinden.  Damit also „-->“ _nicht_ zu „→“ wird, muß man „\-->“ eingeben
(oder „-\->“).

Außerdem auf Parserebene, um z.B. zu verhindern, daß ein Asterisk zu Beginn
eines Absatzes als Punkt einer Aufzählung interpretiert wird:

\* Dieser stinknormale Absatz beginnt mit einem „*“.

Im Programm sind das zwei ziemlich verschiedene Sachen, aber es ist sinnlos,
für den Benutzer dazwischen zu unterscheiden.  Es sollte auf diesen subtilen
Unterschied nichtmal in der Doku hingewiesen werden.


4. Gleitende Umgebungen und Bild- und Texteinfügungen
=====================================================

///////////////////////////////////////////////////////////////////////////////

Hier ist der Inhalt der Gleitumgebung.  Es müssen mindestens vier »/« sein, um
eine gültige Linie zu bilden.  Vor und hinter der Gleitumgebung muß eine
Leerzeile sein.

Abbildung #.#, `das Label`:: Dies ist die Bildunterschrift für eine gleitende
Umgebung.  Sie beginnt mit ".* [0-9#.]+[a-z]?:: ".  Das ".*" wird dann als
Gleitumgebungstyp betrachtet und die Numerierung eingefügt.  Alles zwischen
Numerierung und Label wird weggeworfen.  Ist ein Label vorhanden, wird auf
jeden Fall eine Nummer generiert.  Ist weder Nummer noch Label vorhanden, muß
das Backend das "Abbildung x.x:" komplett unterdrücken.  Implizit kann der
Inhalt der Abbildungsunterschrift als Label dienen, wie bei Abschnitten.
Kollidiert dieses implizite Label mit dem eines Abschnitts oder einer Umgebung
(s.u.) und es wird darauf verwiesen, gibt das einen Fehler.  Man muß dann ein
explizites Label nehmen, was dann Vorrang hat.  Das implizite verweist dann auf
den Abschnitt.
///////////////////////////////////////////////////////////////////////////////

Nun mal ein Beispiel für die Subfigure-Umgebung:

///////////////////////////////////////////////////////////////////////////////
Erstes Bild

Abbildung `Label1`:: oben links

Zweites Bild

Abbildung #.#b `Label2`:: oben rechts

Drittes Bild

Abbildung `Label3`:: unten links

Viertes Bild

Abbildung `Label4`:: unten rechts

Abbildung `Gesamtabbildung`:: Diese Bildunterschrift wird unter _alle_ gesetzt.
Per Default werden zwei Unterabbildungen nebeneinander gesetzt.  Man kann das
in den Float-Parameters (hinter den ///// in der oberen Linie) überstimmen mit
```Spalten: 2``` oder ```Spalten: 2:3:2``` (für die einzelnen Zeilen; die
letzte Zahl wird dann auch für alle Folgezeilen genutzt).  Die Breiten der
Grafiken sind -- wie immer in Gummi -- maximal.
///////////////////////////////////////////////////////////////////////////////

So wird eine Grafik eingefügt:

Einfügung:: grafik.png

Damit kann auch eine Textdatei eingefügt werden.  Ein Alias für ```Einfügung```
ist ```Grafik```.  Das sind übrigens verkürzte URLs, d.h. eigentlich muß man
```file:grafik.png``` schreiben, und man kann auch Web-Dokumente einfügen:

Einfügung:: http://www.wasweissich.org/mein_kapitel4.rsl

Man kann auch Parameter für Bilder angeben:

Einfügung::grafik.png, Skalierung: 25%, volle Breite

Die Parameternamen sind – wie üblich bei Gummi – entweder auf Englisch oder in
der aktuellen Dokumentensprache, und es wird zwischen Groß- und Kleinschreibung
unterschieden.


5. Tabellen
===========

Drei Tabellentypen sind erlaubt: Die beiden von reStructuredText und die eine
von WikiMedia.


5.1 Gittertabellen
==================

Erstmal die Gittertabellen:

+--------------------------+---------------++---------------+---------------+
| Überschrift 1            | Überschrift 2 || Überschrift 3 | Überschrift 4 |
| (Überschriften optional) |               ||               |               |
+==========================+===============++===============+===============+
| Zeile 1, Spalte 1        | Spalte 2      || Spalte 3      | Spalte 4      |
+--------------------------+---------------++---------------+---------------+
| Zeile 2                  | Zellen können über mehrere Spalten gehen.      |
+--------------------------+---------------++-------------------------------+
| Zeile 3                  | Zellen können || - Zellen können               |
+--------------------------+ über mehrere  || - Blockelemente               |
| Zeile 4                  | Zeilen gehen. || - enthalten.                  |
+--------------------------+---------------++-------------------------------+


5.2 Einfache Tabellen
=====================

Dann die einfachen Tabellen:

======  ======  ========
    Inputs       Output
--------------  --------
  A       B     A oder B
======  ======  ========
Falsch  Falsch  Falsch
Wahr    Falsch  Wahr
Falsch  Wahr    Wahr
Wahr    Wahr    Wahr
======  ======  ========

Die Linien mit einfachen Bindestrichen sind hier nur für den Columnspan!  Sie
dienen nicht der Strukturierung, und insbesondere erzeugen sie keine Linien.

Dabei sind Ausrichtungen wie bei AsciiDoc möglich:

|=====  =====|  ===|====
    Inputs       Output
--------------  --------
  A       B     A oder B
======  ======  ========
Falsch  Falsch  Falsch
Wahr    Falsch  Wahr
------  ------  -------|
Falsch  Wahr    Wahr
Wahr    Wahr    Wahr
======  ======  ========

Die erste Spalte wird linksbündig (Default), die zweite rechtsbündig und die
dritte zentriert ausgerichtet.  In der drittletzten Zeile wird die letzte Zelle
rechtsbündig ausgerichtet.  Benutzt man „zentriert“ mit irgendeinem anderen
Zeichen, wird daran ausgerichtet:

=========  ===,===
Produkt    Preis
=========  |======
Uhr         100,00
Fernseher  2000,00
Radio        30,00
=========  =======

Das »|« sorgt hier dafür, daß „Preis“ linksbündig gedruckt wird.

Dieses ganze Ausrichtungsgedöns funktioniert auch in Gittertabellen.  Auch hier
müssen die Marker _unterhalb_ der Zeile sein, die sie ausrichten, bzw. in der
allerersten Zeilen, wenn sie die ganze Spalten voreinstellen sollen.  Vertikale
Ausrichtung geht nur in Gittertabellen und nur, wenn sie mindestens drei Zeilen
hoch ist:

+--------------------------+---------------++-------------------------------+
| Zeile 3                  | Zellen können || - Zellen können               |
+--------------------------+ über mehrere  -- - Blockelemente               |
| Zeile 4                  | Zeilen gehen. || - enthalten.                  -
+--------------------------+---------------++-------------------------------+

Hier wird die zweite Spalte zentriert und die dritte bündig an der Unterkante
ausgerichtet.

Wie auch bei reStructuredText, gelten für Zellen der ersten Spalte von
einfachen Tabellen zwei Sonderregeln: Erstens darf sie nicht komplett leer
sein, und zweitens darf sie nicht über mehrere Zeilen gehen.  Dadurch ist es
möglich, alle anderen Spalten mehrzeilig auszulegen:

==========  =============
Produkt     Beschreibung
==========  =============
Uhr         schön, alt
            und vergoldet
Fernseher   kaputt
Radio       Retro-Look
=========   =============

Bei reStructuredText wird eine komplett leere erste Spalte mit » ..« angezeigt,
aber ich ziehe vor, eine solche Spalte einfach zu verbieten.  Wer's braucht,
soll ein geschütztes Leerzeichen hineinschreiben oder Gittertabellen benutzen.

Ach ja: Einfache Tabellen müssen mindestens zwei Spalten haben, und jede Spalte
muß mindestens drei Zeichen breit sein.


5.3 WikiMedia-Tabellen
======================

Und dann gibt es noch die WikiMedia-Tabellen, falls man einen Proportionalfont
benutzt und ansonsten in Schwulitäten käme:

{|
!Programmname
!Kanal
!Frequenz (MHz)
!Anmerkung
|-
|[http://www.3sat.de 3SAT] || K10 || 210,25 ||
|-
|[http://www.DasErste.de ARD Das Erste] || K05 || 175,25 || 2)
|-
|[http://www.arte.de arte] || S20 || 294,25 || 14.00-03.00, 2-Kanal: deutsch & französisch
|-
|[http://www.br-online.de BR] Bayrischer Rundfunk || S04 || 126,25 ||
|}

Wie das genau funktioniert, kann man unter
http://de.wikipedia.org/wiki/Hilfe:Tabellen nachlesen, ich will aber ganz
sicher nur die grundlegenden Funktionen übernehmen.


6. Formeln
==========

Formeln werden in geschweiften Klammern eingegeben.  Also ist der Satz des
Pythagoras für die drei Längen {a}, {b} und {c}:

{a^2 + b^2 = c^2.}

Dadurch wird das $ entlastet und es sieht auch ganz gut aus.  Abgesetzte
Formeln sind halt nicht innerhalb eines Absatzes.  Brüche sehen so aus:

{n+1 // n}

Und mit vergrößerbaren Klammern:

{(n+1 // n) `mit Label`}

Vergrößerbare Klammern sind also unmittelbar innerhalb von geschweiften
Klammern (Whitespace ist in Formeln nur zum terminieren von Befehlen wichtig,
wie in LaTeX).  Funktionen werden anhand einer Tabelle erkannt: {sin
\alpha}. Man darf auch gerne stattdessen {sin α} eingeben.  Wurzeln gehen so:
\root{n} als Synonym für √{n}, dritte mit √³{n} oder eben \root^3{n}.
Selbstredend lassen sich auch Gleichungen ausrichten:

{ a  &= 2 b }
{ 2c &= b   }

Hier kommt noch ein bißchen LaTeX durch.  Das Verhalten ähnelt der
align-Umgebung.  Text in Formeln wird wie in OpenOffice.org durch "..."
realisiert.

Übrigens muß man \root und \alpha mit Backslash versehen, aber „sin“ nicht,
wegen der “Input Method”, realisiert als Präprozessor: Bevor der Parser mit dem
parsen anfängt, werden \…-Sequenzen durch Unicodes ersetzt.  \root und √ sind
also für den Parser ununterscheidbar.  Die Input-Method zollt Tribut den vielen
Editoren, die Unicodes nicht richtig eingeben können.  In einem Dokument kann
man die Input Method auch ausschalten oder konfigurieren, z.B. um ~ ↝
NoBreakSpace oder typographische Anführungszeichen zu bekommen.  Sollte für den
Benutzer zu berechenbarem Verhalten führen, weil man „\root“ und „\alpha“ als
ein Symbol empfindet, „sin“ aber nicht.

6.1. Physikalische Größen
=========================

Dann sind da noch physikalische Größen.  Da die in allen Zünften vorkommen,
lohnt es sich, eine einfache Syntax dafür zu haben (im Gegensatz zu
z.B. chemischen Formeln).  Ich schlage vor: {3~m} Die Tilde ist eigentlich ein
geschütztes Leerzeichen, wird aber durch die Input Method ersetzt.  Ein
ThinSpace (geschütztes, halbes Leerzeichen) ist auch möglich.  Man kann also
auch {3 m²} schreiben, was schon ganz nett aussieht.  Jeglicher ungeschützter
Whitespace oder Interpunktionszeichen, Klammern etc. beenden die Größe.  Man
kann also schreiben

{ A = 4 cm² = s². }

Das ist also äquivalent zu LaTeXs ```\[A = \unit[4]{cm^2} = s^2 \]```.

Will man nur die Einheit schreiben, läßt man eben die Zahl weg, fängt aber
trotzdem mit dem geschützten Leerzeichen an.  Vor diesem dürfen aber keine
Buchstaben o.ä. stehen: { m/s}

Technisch wird das realisiert, indem die Maßzahl und Einheit als Unterformel
betrachtet werden, in der andere Formatierungsregeln gelten.  Daher kann man
auch mit // einen Bruch erzeugen: {4 {m//s}}.  Man bachte, daß die geschweiften
Klammern nicht implizit sind, man muß sie setzen, wenn man sie braucht!  Die
Maßzahl darf aber nicht geklammert werden.

Es kommt aber noch besser.  Ein <Zahl><geschützer Leerraum><Einheit> wird auch
ohne geschweifte Klammern als physikalische Größe aufgefaßt.  Man kann also
einfach 4,3e-10 cm²/Vs schreiben.  Wie das e-10 formatiert wird, hängt übrigens
vom Backend ab.

Will man nur eine Maßzahl schreiben, kann man es mit 4,3e-10~ (oder eben dem
geschützen Leerzeichen) tun.  Grundsätzlich gilt: Bei geschützten Leerraum
fängt Gummi an, in beide Richtungen zu parsen, und wenn dabei etwas nach
physikalischer Größe aussieht (oder auch nur ein Teil davon), wird das
entsprechend behandelt.


7. Textbausteine
================

Textbausteine funktionieren wie in reStructuredText, |Textbaustein|.  Parameter
gibt es dafür nicht, und es ist nur Inline-Material erlaubt.

|Textbaustein|:: d.h. mit Pipe-Zeichen


8. Direktiven und Rollen
========================

Direktiven und Rollen funktionieren ausdrücklich auch in Formeln.

8.1 Direktiven
==============

Direktiven kann man sich als Makros für Arme in der Gummi-Welt vorstellen.  So
ändert man beispielsweise die Dokumentsprache:

Sprache:: deutsch

Es sind auch „key=value“-Paare möglich, mit Kommas getrennt.  Mit `Sprache::
deutsch` sind auch Direktiven auf Inline-Ebene möglich.  Ein Block mit
Block-Direktiven darf _nur_ aus Direktiven bestehen.  Der Name der Direktive,
also das vor dem ::, darf alle möglichen Zeichen enthalten, muß aber auf
derselben Zeile beginnen.

Die Direktive

Spezial:: key1: value1, key2: value2

Ist ein \special-artiger Erweiterungsmechanismus, der ans Backend weitergegeben
wird.  Und dann gibt es noch die Einfügungs-Direktive, siehe → Abschnitt
`Gleitende Umgebungen ...`.

Alle Direktiven sind Teil der Gummi-Spezifikation.  Backends können keine
zusätzlichen Direktiven definieren, Autoren sowieso nicht.  Alles besondere muß
über die Spezial-Direktive gehen.


8.1.1  Auskommentierungen
=========================

Außerdem gibt es zwei Direktiven, die überhaupt nichts erzeugen, im Gegenteil:

```
Ignoriere::

...

::Ende Ignoriere
```

Alles dazwischen wird vollständig ignoriert.  Selbst Index-Anweisungen und
Textbaustein-Definitionen erzeugen nichts.  Diese Direktive kann geschachtelt
werden.  Wird einmal zu oft geschlossen, gibt's eine Warnung.


8.2 Umgebungen
==============

Umgebungen haben eine sehr ähnliche Syntax zu Direktiven, unterscheiden sich
von ihnen aber dadurch, daß der Autor beliebige Umgebungen benutzen kann.  Sie
haben einen Anfang und ein Ende, dürfen jedoch nicht geschachtelt werden.
Namen, die bereits für Direktiven vergeben werden (ob Englisch oder aktuelle
Dokumentensprache), dürfen nicht benutzt werden.  Beispiel:

```
Satz:: Satz des Pythagoras

Im rechtwinkligen Dreieck ist die Summe der Quadrate über den Katheten gleich
dem Hypotenusenquadrat.

::Ende Satz
```

Eine Umgebung kann also eine Überschrift haben, die in demselben Block wie der
Umgebungsanfang steht.  Länger kann sie nicht sein.  Umgebungen können wie
Gleitumgebungsunterschriften eine Nummer und ein Label haben:

```
Satz #.#, `Pythagoras`:: Satz des Pythagoras
```

Das Label kann das implizite Label durch die Umgebungs-Überschrift sein, oder
das explizite Label.  Es gibt im Label keine impliziten Namensräume.  Sollten
in einem Abschnitt mehrere Umgebungen dieselbe Überschrift haben und es wird
darauf verwiesen, gibt es einen Fehler.  Man muß dann also das explizite Label
benutzen.  Allein die Abschnittsüberschrift, so sie denn auch gleich ist, kann
so verlinkt werden, sie hat nämlich Vorrang.

Wenn ein Backend mit einem Typ von Umgebung nichts anfangen kann, muß es eine
Standard-Formatierung ausgeben, d.h. eine irgendwie hervorgehbene Überschrift,
Augabe des Typs unter Verwendung des bloßen Umgebung-Namens und Erzeugung der
richtigen Numerierung.


8.3 Rollen
==========

Ähnlich sind _Rollen_.  Sie sind quasi Makros für noch Ärmere.  Sie geben auf
Inline-Ebene bestimmten Teilen ein besonderes Markup: `Einstein`:Name: oder
`sp3`:Orbital:.  Das ist von reStructuredText übernommen, allerdings darf die
Rolle nur _nachgestellt_ sein.  Die Rolle steht zwischen den Doppelpunkten und
wird ans Backend weitergereicht, das etwas damit anfangen kann oder nicht.
Wird eine Rolle nicht erkannt, muß sie ignoriert werden.

Rollen dürfen nicht geschachtelt werden, auch nicht indirekt über Textbausteine
oder Einfügungen.

Standard-Rollen gibt es nicht, d.h. dies ist ein Erweiterungsmechanismus, um
logisches Markup in Spezialfällen zu erlauben.  Auch hier gilt wie sonst:
Englische Rollen-Namen müssen immer funktionieren, optional ist die aktuell
eingebaute Dokumentensprache u.U. möglich.  Das zu erkennen ist jedoch Aufgabe
des Backends.


9. Quelltextauszüge
===================

Quelltextauszüge werden mit \`\`\`...\`\`\` eingerahmt: ```print a$``` oder

```
10 cls
20 print "Hallo"
```

Mit

Programmiersprache:: BASIC

kann man für die folgenden Quelltext-Auszüge die Programmiersprache (für's
Syntax-Highlighting) einstellen.


10. Meta-Informationen
======================

Meta-Infos (Titel, Autor, Schlüsselwörter etc.) sind Direktiven.  Sie dürfen
überall im Dokument vorkommen, sinnigerweise sammelt man sie aber weit oben.
Wird eine Meta-Information mehrfach definiert, gilt die _erste_ Definition.

Am besten fängt man mit ```Language::``` an, damit man den Rest in der
„korrekten“ Sprache angeben kann:

```
Language:: deutsch
Titel::    Die Expansion subterraner
           Knollengewächse
Autor::    Ich natürlich
Theme::    IAM Diplomarbeit
…
```

Die Sprache kann nach RFC 4646 oder ausgeschrieben erfolgen.  Bei letzterem
muß, abgesehen von der Großschreibung, exakte Übereinstimmung mit den
vorgegebenen Bezeichnungen vorhanden sein.  Die durch Bindestriche abgetrennten
Teile nach RFC 4646 werden durch Kommas separiert.  Diese Bezeichnungen müssen
in Englisch und in der Landessprache vorhanden sein.  Folgendes ist also
gleichwertig:

```
Sprache:: de-DE-1996
Sprache:: deutsch, Deutschland, neue Rechtschreibung
Sprache:: German, Germany, new spelling
```

Das Abstract gehört auch zu den Metadaten, ist aber als Umgebung realisiert:

```
Zusammenfassung::

Dieses Dokument ist eine Beispieldatei für Gummi.

::Ende Zusammenfassung
```
