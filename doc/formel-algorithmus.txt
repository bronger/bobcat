-*- coding: utf-8; mode: text; mode: longlines -*-

Die zentrale Funktion ist parse_math_row.  Sie scannt mathematisches Material und gibt exakt ein Mathematik-Element, sowie die aktuelle Parse-Position zurück.

Die Eingangsparameter sind: excerpt, position, whitespace_terminated.  whitespace_terminated ist True, wenn es sich um Material handelt, das Whitespace-limitiert ist (also ein Radikand oder ein Sub-/Superskript).

parse_math_row wird praktisch die gesamte Arbeit machen.  Insbesondere wird die MathGroup-Klasse keine parse-Methode brauchen.  Aber auch MathIdentifier, MathText oder MathOperator werden in parse_math_row komplett gebaut.

Am Anfang muß parse_math_row – neben Whitespace, der u. U. das Parsing sofort beendet – schauen, ob durch eine öffnende Klammer (explizit oder implizit) sofort eine MathGroup gebaut wird.  Ist das der Fall, wird das getan und parse_math_row mit dem folgenden Material nochmal angeworfen (diesmal mit whitespace_terminated auf jeden Fall auf False).

Schritte in parse_math_row, während durch das Excerpt gewandert wird:

  1. Ist whitespace_terminated True und es wird Whitespace gefunden, bricht die Schleife ab.

  2. Wird eine öffnende Klammer gefunden, wird das bisher gefundene Material in eine MathGroup gepackt und die als letztendlicher Rückgabewert gespeichert.  Dann wird parse_math_row für das folgende erneut aufgerufen und das Ergebnis an die Kinderliste des Rückgabewertes angehängt.

  3. Wird ein Bruchstrich gefunden, wird, falls vorhanden, die aktuelle Gruppe geschlossen, der letztendliche Rückgabewert auf eine MathFraction gesetzt, das Einzelelement bzw. die Gruppe als Zähler hinzugefügt, und parse_math_row für das Sammeln des Nenners aufgerufen.

Ich brauche ein Set mit sämtlichen öffnenden Unicode-Klammern (inklusive des Pipe-Zeichens und des doppelten vertikalen Strichs), und eines mit sämtlichen schließenden (ohne Pipe-Zeichen & Co). Außerdem benötige ich ein Dictionary, das alle Unicode-Superskripte auf normale Zeichen abbildet, und noch eines, das dasselbe mit Subskripten tut.

Ich brauche einen kompilierten regulären Ausdruck, der Zahlen parsen kann.  Wenn der Autor mit einer Direktiven von Dezimalpunkt auf Dezimalkomma wechselt, muß diese Variable neu berechnet werden.

Außerdem brauche ich ein Set mit allen eingebauten Funktionen, und ein Set mit allen eingebauten Multi-Zeichen-Bezeichnern (letztere werden zwar als Multi-Zeichen-Bezeichner erkannt, aber nicht aufrecht gedruckt).  Beides sind von Set abgeleitete Datentypen, die ein Attribut aktuell halten, welches einen kompilierten regulären Ausdruck enthält von der Form "Element1|Element2|Element3|…".

Ich brauche ein Set mit allen sog. „großen Operatoren“.  Horizontale Klammern werden allerdings extra behandelt.




 LocalWords:  coding utf mode text longlines parse math row scannt Elter True
 LocalWords:  whitespace terminated Sub enclose group has opening brace closing
 LocalWords:  False LocalWords frozenset Pipe mappt combined diacritical Marks
 LocalWords:  combining MathFraction MathIdentifier weitergeparst excerpt
 LocalWords:  position
